


import json

import jk_json
import jk_typing
import jk_prettyprintobj

from thaniya_common.cfg import CfgKeyValueDefinition
from thaniya_common.cfg import AbstractCfgComponent
from .BackupVolumeID import BackupVolumeID








class _Magic(AbstractCfgComponent):

	MAGIC = "thaniya-volume-cfg"

	__VALID_KEYS = [
		CfgKeyValueDefinition("magic", str, False),
		CfgKeyValueDefinition("version", int, False),
	]

	def __init__(self):
		super().__init__(_Magic.__VALID_KEYS)

		self._magic = _Magic.MAGIC				# str
		self._version = 1						# int
		self._comment = "This file is part of the Thaniya backup volume management system! Please do not edit this file manually!"
	#

#



class _DataV1(AbstractCfgComponent):

	__VALID_KEYS = [
		#CfgKeyValueDefinition("volumeGroup",			str,				False),													# NOTE: for future implementation; not yet used
		CfgKeyValueDefinition("volumeID",				BackupVolumeID,		False,		BackupVolumeID.parseFromStr,	str),
		CfgKeyValueDefinition("backupBaseDirPath",		str,				True),
		CfgKeyValueDefinition("isActive",				bool,				False),
	]

	def __init__(self):
		super().__init__(_DataV1.__VALID_KEYS)

		#self._volumeGroup = None				# str						# NOTE: for future implementation; not yet used
		self._volumeID = None					# BackupVolumeID
		self._backupBaseDirPath = None			# str
		self._isActive = None					# bool
	#

#



#
# Represents the contents of a backup volume information file.
#
class BackupVolumeCfgFile(jk_prettyprintobj.DumpMixin):

	################################################################################################################################
	## Constructor Method
	################################################################################################################################

	def __init__(self):
		self._magic = _Magic()
		self._data = _DataV1()
	#

	################################################################################################################################
	## Public Properties
	################################################################################################################################

	@property
	def data(self) -> _DataV1:
		return self._groups["data"]
	#

	################################################################################################################################
	## Helper Methods
	################################################################################################################################

	def _dumpVarNames(self) -> list:
		return [
			"_magic",
			"_data",
		]
	#

	################################################################################################################################
	## Public Methods
	################################################################################################################################

	def writeToFile(self, filePath:str):
		assert isinstance(filePath, str)

		jk_json.saveToFilePretty(self.toJSON(), filePath)
	#

	def toJSON(self) -> dict:
		ret = {
			"magic": self._magic.toJSON(),
			"data": self._data.toJSON(),
		}
		return ret
	#

	def __str__(self):
		return json.dumps(self.toJSON(), indent="\t", sort_keys=True)
	#

	@staticmethod
	def loadFromFile(filePath:str):
		assert isinstance(filePath, str)
		jData = jk_json.loadFromFile(filePath)

		return BackupVolumeCfgFile.loadFromJSON(jData)
	#

	@staticmethod
	def loadFromJSON(jData:dict):
		assert isinstance(jData, dict)

		ret = BackupVolumeCfgFile()

		ret._magic.loadFromJSON(jData["magic"])
		assert ret._magic._magic == _Magic.MAGIC
		assert ret._magic._version == 1

		ret._data.loadFromJSON(jData["data"])

		return ret
	#

	#
	# Use this method to set a data value.
	#
	@jk_typing.checkFunctionSignature()
	def setValue(self, name:str, value):
		self._data.setValue(name, value)
	#

	#
	# Use this method to read a data value.
	#
	@jk_typing.checkFunctionSignature()
	def getValue(self, name:str):
		return self._data.getValue(name)
	#

#









