

import json
import os

import jk_json
import jk_typing
import jk_prettyprintobj

from thaniya_common.cfg import *





# TODO: maybe move this to a separate file named "constants.py" storing all constants?
FILE_NAME = "_thaniya_server_upload_info.json"






class _Magic(CfgComponent_Magic):

	MAGIC = "thaniya-server-upload-info"
	VERSION = 1
	VALID_VERSIONS = [ 1 ]

#



class _DataV1(AbstractCfgComponent):

	VALID_KEYS = [
		CfgKeyValueDefinition(	key="backupUser",					pyType=str,		nullable=False		),
		CfgKeyValueDefinition(	key="tAllocation",					pyType=float,	nullable=False		),
		CfgKeyValueDefinition(	key="tCompletion",					pyType=float,	nullable=False		),
		CfgKeyValueDefinition(	key="peerNetworkAddress",			pyType=str,		nullable=False		),
		CfgKeyValueDefinition(	key="estimatedTotalBytesToUpload",	pyType=int,		nullable=False		),
		CfgKeyValueDefinition(	key="rawLog",						pyType=list,	nullable=False		),
	]

	def __init__(self):
		super().__init__()

		self._backupUser = None						# str
		self._tAllocation = None					# float
		self._tCompletion = None					# float
		self._peerNetworkAddress = None				# str
		self._estimatedTotalBytesToUpload = None	# int
		self._rawLog = None							# list
	#

#






#
# This class provides information about an uploaded backup. This data is generated by the *server*, not the client.
# Therefore this data will never be subjected to manipulation.
#
class ServerBackupUploadInfo(AbstractAppCfg):

	################################################################################################################################
	## Constructor Method
	################################################################################################################################

	def __init__(self):
		super().__init__(
			_Magic,
			True,
			{
				"data": _DataV1(),
			}
		)
	#

	################################################################################################################################
	## Public Properties
	################################################################################################################################

	@property
	def data(self) -> _DataV1:
		return self._groups["data"]
	#

	################################################################################################################################
	## Helper Methods
	################################################################################################################################

	################################################################################################################################
	## Public Methods
	################################################################################################################################

	################################################################################################################################
	## Static Methods
	################################################################################################################################

	@staticmethod
	def loadFromFile(filePath:str):
		assert isinstance(filePath, str)

		jData = jk_json.loadFromFile(filePath)

		ret = ServerBackupUploadInfo()
		ret._loadFromJSON(jData)

		return ret
	#

	@staticmethod
	def loadFromDir(dirPath:str):
		assert isinstance(dirPath, str)

		return ServerBackupUploadInfo.loadFromFile(os.path.join(dirPath, FILE_NAME))
	#

	def writeToDir(self, dirPath:str):
		assert isinstance(dirPath, str)

		self.writeToFile(os.path.join(dirPath, FILE_NAME))
	#

#










